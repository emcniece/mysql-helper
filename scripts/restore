#!/bin/sh
# Usage:
#   restore
#   restore /backup/files-20170731-223028.tar.gz
#   restore /backup/wordpress-20170731-222745.sql
#   restore /backup/wordpress-20170731-222745.sql.gz
#

MYSQL_HOST=${MYSQL_HOST:-"mysql"}
MYSQL_PORT=${MYSQL_PORT:-"3306"}
MYSQL_USER=${MYSQL_USER:-"mysql"}
MYSQL_PASS=${MYSQL_PASS:-"mysql"}
MYSQL_DB=${MYSQL_DB:-"mysql"}
BACKUP_DIR=${BACKUP_DIR:-"/backup"}
TARGET_DIR=${TARGET_DIR:-"/target"}
TMP_DIR=${TMP_DIR:-"/tmp/helper-extract"}
ARCHIVE_ROOT_FILE=${ARCHIVE_ROOT_FILE:-""}
RESTORE_LOG_FILE=${RESTORE_LOG_FILE:-"$TARGET_DIR/.restore.log"}


check_file(){
  if [ ! -f $1 ]; then
    echo "ERROR: File not found: $1"
    return 1
  fi
}

wait_for_db(){
  until nc -z $MYSQL_HOST $MYSQL_PORT; do
    echo "waiting for database container..."
    sleep 5

    COUNTER=$((COUNTER+1))
    if [ "$COUNTER" -ge "$MAX_CONN_CHECKS" ]; then
      echo "ERROR: could not connect to database"
      exit 1
    fi
  done

  echo "Connected to host/database: $MYSQL_HOST/$MYSQL_DB"
}

restore_db(){
  if [ -f "$RESTORE_LOG_FILE" ]; then
    echo "    WARNING: DB restore already done on $(cat $RESTORE_LOG_FILE). Skipping DB restore."
  else

    # Ensure DB connection
    wait_for_db

    if [ -z "$1" ]; then
      echo "ERROR: No file or database specified"
      echo "Requires input parameters in one of the following formats:"
      echo "  restore /db.sql"
      echo "  restore /db.sql.gz"
      echo "  restore dbName /db.sql"
      echo "  restore dbName /db.sql.gz"
      return 1
    fi

    fullfilename=$1
    filename=$(basename "$fullfilename")
    ext="${filename##*.}"

    case "${ext}" in
      sql)
        CAT_CMD=cat;;
      gz)
        CAT_CMD=zcat;;
    esac

    if [ -z "$2" ]; then
      check_file "$1"

      echo "=> Restore database from $1"
      if (${CAT_CMD} "$1" | mysql -h${MYSQL_HOST} -P${MYSQL_PORT} -u${MYSQL_USER} -p${MYSQL_PASS} ${MYSQL_DB} ) ;then
        echo "   Restore succeeded"
      else
        echo "   Restore failed"
      fi
    else
      check_file "$2"

      echo "=> Restore database $1 from $2 "
      if (${CAT_CMD} "$2" | mysql -h${MYSQL_HOST} -P${MYSQL_PORT} -u${MYSQL_USER} -p${MYSQL_PASS} "$1" ) ;then
        echo "   Restore succeeded"
      else
        echo "   Restore failed"
      fi
    fi

  fi # if no restore log file

} # restore_db()

restore_files(){
  echo "=> Restoring files from $1"
  check_file "$1"

  if [ -f "$RESTORE_LOG_FILE" ]; then
    echo "    WARNING: File restore already done on $(cat $RESTORE_LOG_FILE). Skipping file restore."
  else

    mkdir -p $TMP_DIR
    if ( tar -zxf $1 -C ${TMP_DIR} ); then
      echo "   Extract to $TMP_DIR succeeded"

      if [ "$ARCHIVE_ROOT_FILE" != "" ]; then
        echo "   Finding root file directory for $ARCHIVE_ROOT_FILE"
        if ( find $TMP_DIR -type f -name $ARCHIVE_ROOT_FILE -print | head -n 1 ); then
          FILE=$(find $TMP_DIR -type f -name $ARCHIVE_ROOT_FILE -print | head -n 1)
          FOUND=$(dirname $FILE)
          echo "   Moving files from $FOUND to $TARGET_DIR"
          cp -rf $FOUND/* $TARGET_DIR
        else
          echo "   ERROR: could not find $ARCHIVE_ROOT_FILE in archive. NO FILES TO RESTORE"
        fi

      else
        echo "   Moving files from $TMP_DIR"
        cp -rf $TMP_DIR/* $TARGET_DIR
      fi

      rm -rf $TMP_DIR
      echo "   Restore complete"
      date > $RESTORE_LOG_FILE

      USER=$( stat -c %u $TARGET_DIR )
      GROUP=$( stat -c %g $TARGET_DIR )
      chown -R $USER:$GROUP $TARGET_DIR/*

      echo "   Setting permissions to USER:GROUP $USER:$GROUP"
      chown -R $USER:$GROUP $TARGET_DIR/*

    else
      echo "   Extract failed"
    fi

  fi
} # restore_files()

full_restore(){
  echo "=> Restoring files/database... "

  if ( ls -d -1 $BACKUP_DIR/* | grep -e .sql$ -e .sql.gz$ ); then
    DB_FILE=$(ls -d -1 $BACKUP_DIR/* | grep -e .sql$ -e .sql.gz$ | tail -1)
    echo "==> Found database backup: $DB_FILE"
    echo $DB_FILE | xargs ./$0
  else
    echo "==> WARN: No database backup available"
  fi

  if ( ls -d -1 $BACKUP_DIR/* | grep -e .tar.gz$ ); then
    ARCHIVE_FILE=$(ls -d -1 $BACKUP_DIR/* | grep -e .tar.gz$ | tail -1)
    echo "==> Found file backup: $ARCHIVE_FILE"
    echo $ARCHIVE_FILE | xargs ./$0
  else
    echo "==> WARN: No file backup available"
  fi

  echo "=> ... Full file/database restore complete."
}

# Do some jobs!
echo "=> MySQL-Helper v$(cat /VERSION)"

case "$1" in
  *.tar.gz) restore_files $1;;
  *.sql.gz) restore_db $1 $2;;
  *.sql)    restore_db $1 $2;;
  *) full_restore;;
esac

echo "=> Done"
